#!/usr/bin/env bash
VERSION=9.3.2
RELEASE=1
COMMIT_ID="0bce57cec4a673b10d7decf55db38781700bad8c"
SRC_DIR=$(dirname "$0")
SRC_DIR=$(cd $SRC_DIR; pwd)
SRC_DIR=$(cd "$SRC_DIR/../"; pwd)

set -e

pushd "$SRC_DIR"
  git switch "v$VERSION" 2> /dev/null || :
  git switch main
  git branch -D "v$VERSION" || :
  git switch -c "v$VERSION"

  if [[ "$@" =~ "--use-existing" ]]; then
    echo "USE EXISTING"
    git log -1 --date=short --format="%ad-%H"|sed 's/-/./g' > .ignore
    git add .ignore
    git commit -am "Release v$VERSION ($RELEASE)"
  else
    echo "BUILD PACKAGE"

    rm -rf src/ pkg/ cli-source/ ./heroku-cli-*.tar*

    git clone https://github.com/heroku/cli.git cli-source

    pushd cli-source
      git fetch origin "$COMMIT_ID"
      git switch --detach "$COMMIT_ID"
      echo "YARN INSTALL"
      yarn

      pushd packages/cli

        echo "REMOVE UPDATE"
        sed -i "/oclif\/plugin-update/d" ./package.json

        echo "CLI YARN INSTALL"
        yarn
        yarn pack --filename "heroku-v$VERSION-linux-x64.tar.xz"
        mv "heroku-v$VERSION-linux-x64.tar.xz" ../..
      popd

      RELEASE_DIR="heroku-cli-v$VERSION-$RELEASE"

      rm -rf "$RELEASE_DIR"
      mkdir "$RELEASE_DIR"

      tar -xzvf "heroku-v$VERSION-linux-x64.tar.xz" -C "$RELEASE_DIR/"

      echo "PACKAGE RELEASE"
      pushd "$RELEASE_DIR"
        mv package heroku
        pushd heroku
          touch yarn.lock
          yarn workspaces focus --production
        popd
        tar -cJvf "$SRC_DIR/heroku-cli-bin-v$VERSION-$RELEASE.tar.xz" heroku
      popd
    popd
    git add -A
    git commit -am "Release v$VERSION ($RELEASE)"
  fi

  has_tag=$(git ls-remote --tags origin | grep "v$VERSION-$RELEASE" || echo "no-tag")
  echo "$has_tag"

  if [[ $has_tag != "no-tag" ]]; then
    git tag -d "v$VERSION-$RELEASE"
    git push origin :"v$VERSION-$RELEASE"
  fi

  echo "creating tag: $VERSION-$RELEASE"
  git tag "v$VERSION-$RELEASE" -m "Heroku CLI v$VERSION ($RELEASE)"

  echo "pushing tag: $VERSION-$RELEASE"
  git push origin "v$VERSION-$RELEASE"

  PKG_COMMIT_ID="$(git rev-list -n 1 tags/v$VERSION-$RELEASE)"

  if [[ "$@" =~ "--update-main" ]]; then
    echo "pushing main"
    git push origin v$VERSION:main
  fi

  git switch main

  echo "deleting branch: v$VERSION"
  git branch -D "v$VERSION"

  if [[ "$@" =~ "--update-main" ]]; then
    echo "pulling updates"
    git pull origin main
  fi

  if [[ -f ../heroku-cli-bin/PKGBUILD ]]; then
    echo "updating PKGBUILD"
    pushd ../heroku-cli-bin

      sed -i "s/^pkgver=.*/pkgver=$VERSION/" ./PKGBUILD
      sed -i "s/^pkgrel=.*/pkgrel=$RELEASE/" ./PKGBUILD
      sed -i "s/^_commit_id=.*/_commit_id=\"$PKG_COMMIT_ID\"/" ./PKGBUILD

      updpkgsums

      makepkg

    popd
  fi
popd
